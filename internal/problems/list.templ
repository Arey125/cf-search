package problems

import (
	"cf-search/internal/ui"
	"fmt"
	"net/http"
	"strconv"
)

func errorHandler(w http.ResponseWriter, status int) {
	w.WriteHeader(status)
}

func serverErrorHandler(w http.ResponseWriter, err error) {
	fmt.Println(err)
	w.WriteHeader(http.StatusInternalServerError)
}

func (s Service) listPage(w http.ResponseWriter, r *http.Request) {
	h := s.htmx.NewHandler(w, r)
	if h.IsHxRequest() {
		s.PartialProblemListHandler(w, r)
		return
	}
	filters := filtersFromRequest(r)

	problems, last, err := s.model.GetPage(0, filters)
	if err != nil {
		serverErrorHandler(w, err)
	}
	err = list(problems, last).Render(r.Context(), w)
	if err != nil {
		serverErrorHandler(w, err)
	}
}

func (s Service) PartialProblemListHandler(w http.ResponseWriter, r *http.Request) {
	page, err := strconv.Atoi(r.URL.Query().Get("page"))
	if err != nil {
		serverErrorHandler(w, err)
	}

	filters := filtersFromRequest(r)
	problems, last, err := s.model.GetPage(page, filters)
	if err != nil {
		serverErrorHandler(w, err)
	}

	err = partialProblemList(problems, page, last).Render(r.Context(), w)
	if err != nil {
		serverErrorHandler(w, err)
	}
}

templ partialProblemList(problems []Problem, page int, last bool) {
	for _, problem := range problems {
		<div class="card">
			<div class="card-header">
				<div class="card-header-title">{ problem.Name }</div>
			</div>
			<div class="card-content">
				<div class="problem-tags">
					@rating(problem.Rating)
					for _, tag := range problem.Tags {
						<span class="tag">
							{ tag }
						</span>
					}
				</div>
			</div>
		</div>
	}
	if !last {
		<div
			hx-post={ fmt.Sprintf("/?page=%d", page+1) }
			hx-trigger="revealed"
			hx-swap="outerHTML"
			hx-include=".filter"
		></div>
	}
}

templ list(problems []Problem, last bool) {
	@ui.Base() {
		<main class="problems-main">
			<div class="sidebar">
				<div class="card">
					<div class="filters">
						<h1 class="title">Filters</h1>
						<label class="checkbox">
							<input
								type="checkbox"
								class="filter"
								name="rated"
								hx-post="/?page=0"
								hx-target="#problems"
								hx-include=".filter"
							/>
							Rated
						</label>
					</div>
				</div>
			</div>
			<div class="container">
				<div class="top-content">
					<div class="content">
						<h1>Problems</h1>
						<input
							id="search"
							name="search"
							class="input filter"
							type="text"
							hx-post="/?page=0"
							hx-trigger="input changed delay:100ms, keyup[key=='Enter']"
							hx-target="#problems"
							hx-include=".filter"
						/>
					</div>
				</div>
				<div class="content problem-list">
					<div id="problems">
						@partialProblemList(problems, 0, last)
					</div>
				</div>
			</div>
		</main>
	}
}

templ rating(rating *int) {
	if rating != nil {
		<span class="tags has-addons">
			<span class="tag is-success">
				Rating
			</span>
			<span class="tag">
				{ fmt.Sprintf("%d", *rating) }
			</span>
		</span>
	}
}
